@startuml Arquitetura Cliente - Projeto Mundo

!theme materia

' ----- Core Three.js & Orquestração -----
class Experience {
  +camera: Camera
  +renderer: Renderer
  +scene: THREE.Scene
  +world: World
  +time: Time
  +sizes: Sizes
  +resources: Resources
  +config: Config
  +inputManager: InputManager
  +networkManager: NetworkManager
  +uiManager: UIManager
  +audioManager: AudioManager ' Opcional, mas comum
  +update() ' Main loop tick
}

class Camera {
  +instance: THREE.PerspectiveCamera
  +controls: OrbitControls | PointerLockControls | DeviceOrientationControls ' Controles variados
  +resize()
  +update()
}

class Renderer {
  +instance: THREE.WebGLRenderer
  +resize()
  +update() ' Render frame
}

class World {
  +experience: Experience ' Referência para acesso a outros módulos
  +environment: Environment?
  +players: Map<playerId, Player> ' Coleção de jogadores (locais e remotos)
  +staticObjects: THREE.Object3D[] ' Objetos do cenário
  +interactiveObjects: Map<objectId, InteractiveObject>
  +initWorld()
  +addPlayer(playerData, isLocal)
  +removePlayer(playerId)
  +updatePlayer(playerId, state)
  +update() ' Atualiza entidades do mundo
  +loadChunk(coords) ' Para streaming/mundo aberto
  +unloadChunk(coords) ' Para streaming/mundo aberto
}

class Environment {
  +sunLight: THREE.DirectionalLight
  +ambientLight: THREE.AmbientLight
  +environmentMap: object ' Textura de ambiente (HDR/EXR)
  +load()
}

' ----- Utilitários Core -----
class Time <<EventEmitter>> {
  +start: number
  +current: number
  +elapsed: number
  +delta: number
  +tick()
  +on(event, callback)
}
class Sizes <<EventEmitter>> {
  +width: number
  +height: number
  +pixelRatio: number
  +aspectRatio: number
  +resize()
  +on(event, callback)
}
class Resources <<EventEmitter>> {
  +items: object ' Assets carregados (modelos, texturas, etc.)
  +toLoad: number
  +loaded: number
  +load(sources) ' Carrega lista inicial de assets
  +lazyLoad(asset) ' Carrega assets sob demanda (mundo aberto)
  +on(event, callback) ' 'ready', 'progress', 'assetLoaded'
}
class Config {
  +debug: boolean
  +worldSize: number
  +playerSettings: object
  +networkSettings: object
}

' ----- Gerenciadores de Lógica -----
class InputManager <<EventEmitter>> {
  +setupEventListeners() ' Teclado, Mouse, Touch, Gamepad, Sensores (Giroscópio, Acelerômetro, Bússola)
  +processInput() ' Normaliza e dispara eventos de ação
  +on(event, callback) ' Ex: 'action:move', 'action:look', 'action:jump', 'action:interact'
  +trigger(event, data) ' Dispara ações normalizadas
}

class NetworkManager <<EventEmitter>> {
  +socket: WebSocket | WebRTC ' Instância da conexão
  +connect(url)
  +disconnect()
  +send(type, payload) ' Envia dados ao servidor (ex: input local, posição)
  +handleMessage(message) ' Processa mensagens do servidor
  +on(event, callback) ' 'connected', 'disconnected', 'playerJoined', 'playerLeft', 'worldState', 'entityUpdate'
}

class UIManager {
  +hudElement: HTMLElement ' Elemento DOM para o HUD
  +updatePlayerList(players)
  +displayChatMessage(message)
  +showInteractionPrompt(show)
  +updateStatus(status) ' Ex: Conectado, Carregando...
}

class AudioManager {
    +playSound(soundName, position?) ' Sons 3D posicionais
    +playMusic(trackName)
    +setListener(camera) ' Para áudio posicional
}

' ----- Entidades do Mundo -----
abstract class BaseEntity {
  +id: string | number
  +mesh: THREE.Object3D
  +update(deltaTime)
}

class Player extends BaseEntity {
  +isLocalPlayer: boolean
  +state: object ' Posição, rotação, etc. (recebido do servidor para remotos)
  +update(deltaTime) ' Interpola/Extrapola movimento para jogadores remotos
  +applyLocalInput(inputActions) ' Apenas para jogador local
}

class InteractiveObject extends BaseEntity {
    +interactionType: string ' 'collect', 'activate', 'open'
    +onInteraction(player)
}

' ----- Relacionamentos -----

' Experience orquestra tudo
Experience o--> Camera
Experience o--> Renderer
Experience o--> World
Experience o--> Time
Experience o--> Sizes
Experience o--> Resources
Experience o--> Config
Experience o--> InputManager
Experience o--> NetworkManager
Experience o--> UIManager
Experience o--> AudioManager

' Componentes Core interagem
Renderer ..> Experience : "needs scene & camera"
World o--> Environment
World "1" *-- "0..*" Player : "manages"
World "1" *-- "0..*" InteractiveObject : "manages"
World ..> Resources : "requests assets"
World ..> Time : "uses delta time"
World ..> Experience : "accesses other modules"

' Gerenciadores interagem com Core, Mundo e entre si (idealmente via eventos)
InputManager ..> Experience : "listens to DOM events via Sizes"
InputManager ..> Player : "(Local) Player listens for 'action:*' events"
NetworkManager ..> World : "updates world based on server messages (add/remove/update players/objects)"
NetworkManager ..> Player : "sends local player state"
NetworkManager ..> UIManager : "updates UI based on network events (connect/disconnect)"
World ..> NetworkManager : "notifies NetworkManager of local interactions to send"
UIManager ..> World : "may query world state for display"
AudioManager ..> Camera : "uses camera as listener"

' Entidades são parte do Mundo
World ..> BaseEntity : "adds entities to scene"
Player ..> BaseEntity
InteractiveObject ..> BaseEntity

' Recursos são usados por muitos
Environment ..> Resources
BaseEntity ..> Resources

' Utilitários são usados por muitos
Experience ..> Time
Experience ..> Sizes
Experience ..> Resources
World ..> Time
BaseEntity ..> Time

' ----- Notas Específicas do Projeto Mundo -----

note right of Experience
  **Arquitetura Cliente-Servidor:**
  Este diagrama representa o **cliente**.
  A lógica de jogo autoritativa, física,
  validação e persistência residem no **servidor**
  (não mostrado aqui).
end note

note left of NetworkManager
  **Sincronização de Estado:**
  NetworkManager recebe atualizações do servidor
  e as repassa para `World` atualizar os `Player` remotos
  e outros objetos sincronizados. O `Player` local envia
  seu input/estado para o servidor via NetworkManager.
end note

note bottom of World
  **Mundo Aberto / Streaming:**
  `World` é responsável por carregar/descarregar
  partes do cenário (`loadChunk`/`unloadChunk`)
  e solicitar assets via `Resources.lazyLoad`
  conforme o jogador se move, para gerenciar
  memória e performance.
end note

note top of Resources
  **Gerenciamento de Assets:**
  `Resources.lazyLoad` é crucial para
  carregar assets de forma assíncrona
  e sob demanda, essencial para mundos grandes.
end note

note left of InputManager
  **Abstração de Input:**
  InputManager captura inputs brutos (teclado,
  mouse, touch, gamepad, **sensores**) e dispara
  eventos de **ação** normalizados (ex: 'action:move').
  O `Player` local escuta essas ações.
end note

note right of Player
  **Representação do Jogador:**
  A classe `Player` representa tanto o jogador
  local quanto os remotos. A lógica de `update`
  difere: local aplica input, remoto interpola
  dados recebidos do servidor via `NetworkManager` -> `World`.
end note

@enduml